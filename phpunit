<?php

require __DIR__.'/vendor/autoload.php';

$finder = new DirectoryIterator(getcwd().'/Tests');
$runningProcs = array();
$exit = 0;
$signs = array('success' => '\\' === DIRECTORY_SEPARATOR ? 'OK' : '?', 'failure' => '\\' === DIRECTORY_SEPARATOR ? 'KO' : '?');

exec('phpunit --version', $versionOutput);
if (!preg_match('/^PHPUnit (\d\.\d\.\d)/', $versionOutput[0], $matches)) {
    $matches = array('', '4.5.0');
}

$cmd = array_map(array('Symfony\Component\Process\ProcessUtils', 'escapeArgument'), $argv);
$cmd[0] = sprintf('phpunit "--colors%s"', version_compare($matches[1], '4.6.0', '>=') ? '=always' : '');
$cmd = implode(' ', $cmd).' "%1$s" > %1$s/phpunit.stdout 2> %1$s/phpunit.stderr';

echo " \033[34mSymfony CMF Test Runner".PHP_EOL,
     " =======================\033[39m".PHP_EOL.PHP_EOL;
echo ' Running the tests for '.basename(getcwd()).', please wait a moment...'.PHP_EOL.PHP_EOL;

foreach ($finder as $file) {
    if (!$file->isDir() || $file->isDot() || 'Resources' === $file->getBasename()) {
        continue;
    }

    $path = $file->getPathname();
    $type = $file->getBasename();

    $proc = proc_open(sprintf($cmd, $path), array(), $pipes);
    if ($proc) {
        $runningProcs[$type] = $proc;
    } else {
        echo 'KO '.$type.PHP_EOL.PHP_EOL;
    }
}

while ($runningProcs) {
    usleep(300000);
    foreach ($runningProcs as $type => $proc) {
        $procStatus = proc_get_status($proc);
        if (!$procStatus['running']) {
            switch ($procStatus['exitcode']) {
                case 0:
                    echo PHP_EOL."\033[32m".$signs['success'].' '.$type."\033[39m".PHP_EOL.PHP_EOL;

                    break;
                default:
                    $exit = 1;
                    echo PHP_EOL."\033[31m ".$signs['failure'].' '.$type."\033[39m".PHP_EOL.PHP_EOL;
            }

            foreach (array('stdout', 'stderr') as $ext) {
                $filePath = 'Tests/'.$type.'/phpunit.'.$ext;
                $file = fopen($filePath, 'rb');
                while (false !== $line = fgets($file)) {
                    echo '    '.$line;
                }
                fclose($file);
                unlink($filePath);
            }

            unset($runningProcs[$type]);
            proc_close($proc);
        }
    }
}

exit($exit);
